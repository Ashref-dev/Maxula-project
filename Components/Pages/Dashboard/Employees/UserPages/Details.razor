@layout Layout.AdminLayout
@page "/users/details"
@using Maxula_project.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DataContext> _contextFactory


<PageTitle>Details</PageTitle>


<div class="mt-6 max-w-6xl mx-auto mx-4 px-4 sm:px-6 lg:px-8">

    <h2 class="text-lg mb-4 leading-6 font-medium text-gray-900">
        Employee details
        @if (user is not null)
        {
            <span class="text-md font-light italic">- showing uid @user.UserId : @(user.FirstName + " " + user.LastName)</span>
        }
    </h2>

    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <h4 class="font-bold mb-2">User</h4>
        <hr class="mb-6 border-b-2 border-primary-600" />
        @if (user is null)
        {
            <p class="italic text-gray-500"><em>Loading...</em></p>
        }
        else
        {
            <dl class="grid grid-cols-2 gap-y-4 px-4">
                <dt class="text-primary-600">Email</dt>
                <dd class="text-gray-900">@user.Email</dd>

                <dt class="text-primary-600">FirstName</dt>
                <dd class="text-gray-900">@user.FirstName</dd>
                <dt class="text-primary-600">LastName</dt>
                <dd class="text-gray-900">@user.LastName</dd>
                <dt class="text-primary-600">IsAdmin</dt>
                <dd class="text-gray-900">@user.IsAdmin</dd>
                <dt class="text-primary-600">Title</dt>
                <dd class="text-gray-900">@user.Title</dd>

                <dt class="text-primary-600">JoinDate</dt>
                <dd class="text-gray-900">@user.JoinDate</dd>
                <dt class="text-primary-600">Address</dt>
                <dd class="text-gray-900">@user.Address</dd>
                <dt class="text-primary-600">Country</dt>
                <dd class="text-gray-900">@user.Country</dd>
                <dt class="text-primary-600">Phone</dt>
                <dd class="text-gray-900">@user.Phone</dd>
                <dt class="text-primary-600">ProductTeam</dt>
                <dd class="text-gray-900">@user.ProductTeam</dd>
                <dt class="text-primary-600">Tags</dt>
                <dd class="text-gray-900">@user.Tags</dd>
            </dl>

        }
    </div>
    @if (user is not null)
    {
        <div class="flex justify-between">
            <a href="@($"/admin/employees")"
               class="inline-flex gap-2 items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
                </svg>
                Back to List
            </a>
            <a href="@($"/users/edit?userid={user.UserId}")" class="inline-flex gap-2 items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                Edit
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                </svg>
            </a>
        </div>
    }
</div>

@code {

    User? user;

    [SupplyParameterFromQuery]
    public int UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var DB = _contextFactory.CreateDbContext();

        user = await DB.Users.FirstOrDefaultAsync(m => m.UserId == UserId);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
