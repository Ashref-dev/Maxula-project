@layout Layout.AdminLayout
@page "/Users/edit"
@inject Maxula_project.Data.DataContext DB
@using Maxula_project.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>


<div class="mt-6 max-w-6xl mx-auto">
    <h2 class="text-lg mb-4 leading-6 font-medium text-gray-900">
        Edit employee details
        @if (User is not null)
        {
            <span class="text-md font-light italic">
                - showing uid @User.UserId : @(User.FirstName + " " +
            User.LastName)
            </span>
        }
        @* <a href="@($"users/delete?userid={UserId}")" class="text-primary-600 underline ml-4">Delete User</a> *@
    </h2>

    <hr class="mb-6 border-b-2 border-primary-600" />
</div>

<div class="max-w-6xl mt-4 mx-auto mx-4">

    @if (User is null)
    {
        <p class="italic text-gray-500"><em>Loading...</em></p>
    }
    else
    {

        <EditForm class="grid grid-cols-1 md:grid-cols-2 gap-x-24 gap-y-8 divide px-8 py-8 shadow-xl" method="post"
                  Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>

                <input type="hidden" name="User.UserId" value="@User.UserId" />
                <div class="mb-3">
                    <label for="email" class="block text-sm font-medium text-gray-900">Email:</label>
                    <InputText id="email" @bind-Value="User.Email"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.Email" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="password" class="block text-sm font-medium leading-6 text-gray-900">Password:</label>
                    <InputText id="password" @bind-Value="User.Password"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.Password" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="firstname" class="block text-sm font-medium leading-6 text-gray-900">FirstName:</label>
                    <InputText id="firstname" @bind-Value="User.FirstName"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.FirstName" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="block text-sm font-medium leading-6 text-gray-900">LastName:</label>
                    <InputText id="lastname" @bind-Value="User.LastName"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.LastName" class="text-red-600" />
                </div>
                <div class="mb-5">
                    <label for="isadmin" class="block text-sm font-medium leading-6 text-gray-900">IsAdmin:</label>
                    <InputCheckbox id="isadmin" @bind-Value="User.IsAdmin"
                                   class="relative w-[3.25rem] h-7 p-px bg-gray-100 border-transparent text-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:ring-red-600 disabled:opacity-50 disabled:pointer-events-none checked:bg-none checked:text-primary-600 checked:border-primary-600 focus:checked:border-primary-600 dark:bg-gray-800 dark:border-gray-700 dark:checked:bg-primary-500 dark:checked:border-primary-500 dark:focus:ring-offset-gray-600 before:inline-block before:size-6 before:bg-white checked:before:bg-primary-200 before:translate-x-0 checked:before:translate-x-full before:rounded-full before:shadow before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-gray-400 dark:checked:before:bg-primary-200" />
                    <ValidationMessage For="() => User.IsAdmin" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="title" class="block text-sm font-medium leading-6 text-gray-900">Title:</label>
                    <InputText id="title" @bind-Value="User.Title"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.Title" class="text-red-600" />
                </div>
            </div>

            <div>

                <div class="mb-3">
                    <label for="picture" class="block text-sm font-medium leading-6 text-gray-900">Picture link:</label>
                    <InputText id="picture" @bind-Value="User.Picture"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.Picture" class="text-red-600" />
                </div>

                <div class="mb-3">
                    <label for="address" class="block text-sm font-medium leading-6 text-gray-900">Address:</label>
                    <InputText id="address" @bind-Value="User.Address"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.Address" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="country" class="block text-sm font-medium leading-6 text-gray-900">Country:</label>
                    <InputText id="country" @bind-Value="User.Country"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.Country" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="block text-sm font-medium leading-6 text-gray-900">Phone:</label>
                    <InputText id="phone" @bind-Value="User.Phone"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.Phone" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="productteam" class="block text-sm font-medium leading-6 text-gray-900">ProductTeam:</label>
                    <InputText id="productteam" @bind-Value="User.ProductTeam"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.ProductTeam" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="tags" class="block text-sm font-medium leading-6 text-gray-900">Tags:</label>
                    <InputText id="tags" @bind-Value="User.Tags"
                               class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage For="() => User.Tags" class="text-danger" />
                </div>

            </div>
            <a href="@($"/admin/employees")"
               class="inline-flex w-fit gap-2 items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                     stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
                </svg>
                Back to List
            </a>


            <button type="submit"
                    class="inline-flex justify-self-end gap-2 w-fit items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                Save edited info
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                     stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round"
                          d="M10.125 2.25h-4.5c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125v-9M10.125 2.25h.375a9 9 0 0 1 9 9v.375M10.125 2.25A3.375 3.375 0 0 1 13.5 5.625v1.5c0 .621.504 1.125 1.125 1.125h1.5a3.375 3.375 0 0 1 3.375 3.375M9 15l2.25 2.25L15 12" />
                </svg>

            </button>
        </EditForm>

    }


</div>

@code {
    [SupplyParameterFromQuery]
    public int UserId { get; set; }

    [SupplyParameterFromForm]
    public User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User ??= await DB.Users.FirstOrDefaultAsync(m => m.UserId == UserId);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateUser()
    {
        DB.Attach(User!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.UserId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/admin/employees");
    }

    bool UserExists(int userid)
    {
        return DB.Users.Any(e => e.UserId == userid);
    }
}
