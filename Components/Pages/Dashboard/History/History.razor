@using Maxula_project.Services.ActivityService

@inject NavigationManager NavigationManager
@inject IActivityService _activityService
@inject IConsoleLoggerService Console
@inject DateService DateService


@* // Dashboard with sidebar layout usage  *@
@layout Layout.AdminLayout

@page "/admin/history/{page?}"

<PageTitle>Maxula - History</PageTitle>

<div class="mt-6">

    <div class="flex justify-between max-w-6xl mb-10 mx-auto mx-4 px-4 sm:px-6 lg:px-8">

        <h2 class="text-lg leading-6 font-medium text-gray-900">
            Activity history @if (FilteredActivities is not null)
            {
                <span class="text-md font-light italic">- showing @FilteredActivities.Count() entries</span>
            }
        </h2>

        <div class="relative inline-block">

            <div class="flex items-center gap-4">

                <SfDateRangePicker TValue="DateOnly?"
                                   @bind-StartDate="@DateService.StartValue"
                                   @bind-EndDate="@DateService.EndValue"
                                   Min="@(new DateTime(2023,6,1))"
                                   Max="@MaxDate"
                                   Placeholder="Choose a Range">
                </SfDateRangePicker>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
                </svg>


                <div class="relative inline-flex">


                    <button type="button"
                            @onclick='() => {HandleNavigate($"admin/history/?q={q}");DateService.HasSearched=true;}'
                            style="z-index:900 !important"
                            class="relative cursor-pointer h-full w-fit inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-gray-50 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                        Filter
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                             class="w-4 h-4 ml-2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z" />
                        </svg>
                    </button>

                    @if (DateService.HasSearched || q is not null)
                    {
                        <div name="clear"
                             @onclick='()=>{FilteredActivities = AllActivities!;
                                 DateService.HasSearched = false;
                                 sortLatest = true;
                                 DateService.StartValue = new DateOnly(2023, 10, 01);
                                 DateService.EndValue  = DateOnly.FromDateTime(DateTime.Now);
                                 HandleNavigate("admin/history/");
                             }'
                             style="z-index:10 !important"
                             class="absolute w-full px-6 py-1 h-10 -bottom-8 flex justify-center items-end rounded-b-lg cursor-pointer text-sm font-medium text-red-700 border border-red-300 bg-red-100 hover:bg-red-100 focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                            <div class="flex gap-1 justify-center items-center">
                                <p>Clear</p>
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     class="w-4 h-4"
                                     fill="none"
                                     viewBox="0 0 24 24"
                                     stroke-width="1.5"
                                     stroke="currentColor">
                                    <path stroke-linecap="round"
                                          stroke-linejoin="round"
                                          d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                </svg>
                            </div>
                        </div>
                    }
                </div>


                <button type="button"
                        class="group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900" id="menu-button" aria-expanded="false" aria-haspopup="true"
                        @onclick='()=> sortToggle = sortToggle == "hidden" ? "":"hidden"'>
                    Sort
                    <!-- Heroicon name: solid/chevron-down -->
                    <svg class="flex-shrink-0 -mr-1 ml-1 h-5 w-5 text-gray-400 group-hover:text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>

            <!--
              Dropdown menu, show/hide based on menu state.

              Entering: "transition ease-out duration-100"
                From: "transform opacity-0 scale-95"
                To: "transform opacity-100 scale-100"
              Leaving: "transition ease-in duration-75"
                From: "transform opacity-100 scale-100"
                To: "transform opacity-0 scale-95"
            -->
            <div class="@sortToggle z-50 origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-2xl bg-white ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
                <div class="py-1" role="none">
                    <!--
                      Active: "bg-gray-100", Not Active: ""

                      Selected: "font-medium text-gray-900", Not Selected: "text-gray-500"
                    -->
                    <button @onclick='()=> {FilteredActivities = FilteredActivities.OrderByDescending(activity => activity.Date).ToList();
                                            sortToggle="hidden";
                                            sortLatest = true;DateService.HasSearched = true;}'
                            class="@(sortLatest ? "font-medium text-gray-900":"text-gray-500") block px-4 py-2 text-sm"
                            role="menuitem" tabindex="-1" id="menu-item-0">
                        Latest
                    </button>

                    <button @onclick='()=> {FilteredActivities = FilteredActivities.OrderBy(activity => activity.Date).ToList();
                                            sortToggle="hidden";
                                            sortLatest = false;DateService.HasSearched = true;}'
                            class="@(sortLatest ? "text-gray-500":"font-medium text-gray-900") block px-4 py-2 text-sm"
                            role="menuitem" tabindex="-1" id="menu-item-1">
                        Oldest
                    </button>
                </div>
            </div>
        </div>
    </div>



    <!-- Activity table -->
    <div class="px-4 sm:px-6 lg:px-8 lg:mx-auto lg:max-w-6xl ">

        <div class="mt-4 flex flex-col">
            <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                    <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                        <table class="min-w-full divide-y divide-gray-300">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col"
                                        class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">
                                        Name
                                    </th>
                                    <th scope="col"
                                        class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                                        Desk ID
                                    </th>

                                    <th scope="col"
                                        class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                                        Date
                                    </th>
                                    <th scope="col"
                                        class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                                        Check in
                                    </th>
                                    <th scope="col"
                                        class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                                        Check out
                                    </th>
                                    <th scope="col"
                                        class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                                        Total Hours
                                    </th>
                                    <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                        <span class="sr-only">Edit</span>
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200 bg-white">

                                @if (FilteredActivities != null)
                                {
                                    @foreach (var activity in FilteredActivities)
                                    {
                                        <tr>
                                            <td class="whitespace-nowrap pl-4 text-sm sm:pl-6">
                                                <div class="flex items-center">
                                                    <div class="h-10 w-10 flex-shrink-0">
                                                        <img class="h-10 w-10 rounded-full"
                                                             src="@activity.User.Picture"
                                                             alt="user icon">
                                                    </div>
                                                    <div class="ml-4">
                                                        <div class="font-medium text-gray-900">@activity.User.FirstName</div>
                                                        <div class="text-gray-500">@activity.User.Email</div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                <div class="text-gray-900 font-semibold">@activity.Sector</div>
                                                <div class="text-gray-500">Desk @activity.DeskId</div>
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                <span class="inline-flex rounded-full bg-green-100 px-2 text-l font-semibold leading-5 text-green-800">
                                                    @activity.Date.ToString("dd/MM/yyyy")
                                                </span>
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                @activity.CheckIn
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                @(activity.CheckOut != null ? activity.CheckOut : "Not yet")
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                @if (activity.CheckOut != null)
                                                {
                                                    DateTime startTime = DateTime.Parse(activity.CheckIn.ToString());
                                                    DateTime endTime = DateTime.Parse(activity.CheckOut.ToString());

                                                    TimeSpan elapsedTime = endTime.Subtract(startTime);

                                                    if (endTime.Date > startTime.Date)
                                                    {
                                                        elapsedTime += new TimeSpan(24, 0, 0);
                                                    }

                                                    double totalHours = elapsedTime.TotalHours - 1;

                                                    <p>@totalHours.ToString("0.00") hours</p>
                                                }
                                                else
                                                {
                                                    <p>N/A</p>
                                                }
                                            </td>
                                            <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                                <a href="" class="text-indigo-600 hover:text-indigo-900">
                                                    Entry @activity.ActivityId »
                                                    <span class="sr-only">, @activity.User.FirstName</span>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <p class="text-3xl">Loading...</p>
                                }


                                <!-- More people... -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* end of activity table *@


    <!-- Pagination -->
    <nav aria-label="Pagination" class="max-w-6xl mx-auto px-4 mt-4 flex justify-between text-sm font-medium text-gray-700 sm:px-6 lg:px-8">
        <div class="min-w-0 flex-1">
            @if (currentPage != 1)
            {
                <button class="inline-flex items-center px-4 h-10 border border-gray-300 rounded-md bg-white hover:bg-gray-100 focus:outline-none focus:border-primary-600 focus:ring-2 focus:ring-offset-1 focus:ring-offset-primary-600 focus:ring-primary-600 focus:ring-opacity-25"
                        @onclick='(() => HandleNavigate($"admin/history/{currentPage - 1}?q={q??""}"))'
                        value="previous">
                    Previous
                </button>
            }
        </div>

        <div class="hidden space-x-2 sm:flex">
            @for (int i = 1; i <= totalPages; i++)
            {
                var page = i;

                <button class="@(page == currentPage ? "ring-1 ring-primary-600":"") inline-flex items-center px-4 h-10 border border-gray-300 rounded-md bg-white hover:bg-gray-100 focus:outline-none focus:border-primary-700 focus:ring-2 focus:ring-offset-1 focus:ring-offset-primary-600 focus:ring-primary-600 focus:ring-opacity-25"
                        @onclick='(() => HandleNavigate($"admin/history/{page}?q={q??""}"))'
                        value="@(page)">
                    @(page)
                </button>
            }
        </div>

        <div class="min-w-0 flex-1 flex justify-end">
            @if (currentPage != totalPages)
            {
                <button class="inline-flex items-center px-4 h-10 border border-gray-300 rounded-md bg-white hover:bg-gray-100 focus:outline-none focus:border-primary-600 focus:ring-2 focus:ring-offset-1 focus:ring-offset-primary-600 focus:ring-primary-600 focus:ring-opacity-25"
                        @onclick='(() => HandleNavigate($"admin/history/{currentPage + 1}?q={q??""}"))'
                        value="next">
                    Next
                </button>
            }
        </div>
    </nav>

</div>

@code {
    List<GetActivityResponseDto> AllActivities = null!;

    List<GetActivityResponseDto> FilteredActivities = null!;


    private string sortToggle = "hidden";

    private bool sortLatest = true;

    [Parameter]
    public string? page { get; set; }

    private int totalPages;

    private int currentPage;

    private int pageSize = 10;

    // search functionality

    [SupplyParameterFromQuery]
    public string q { get; set; }



    protected override async Task OnInitializedAsync()
    {

        page ??= "1";

        // getting the current page from path
        currentPage = int.Parse(page);

        DateOnly start = DateService.StartValue.Value;

        DateOnly end = DateService.EndValue.Value;



        if (q is null)
        {
            var response = await _activityService.GetAllActivities("", start, end, currentPage, pageSize);

            if (response.Data != null)
            {
                FilteredActivities = response.Data == null ? new List<GetActivityResponseDto>() : response.Data;
                AllActivities = FilteredActivities;
            }
        }
        else
        {
            var response = await _activityService.GetAllActivities(q, start, end, currentPage, pageSize);

            await Console.LogAsync(response);

            if (response.Data != null)
            {
                FilteredActivities = response.Data == null ? new List<GetActivityResponseDto>() : response.Data;
                AllActivities = FilteredActivities;
            }
        }


        // Calculate the total number of pages based on the total number of activities and the page size
        var total = await _activityService.GetAllActivities(q ?? "", start, end, 1, 88);


        totalPages = total.Data != null ? (int)Math.Ceiling((double)total.Data.Count / pageSize) : 1;

    }

    private void HandleNavigate(string route)
    {
        NavigationManager.NavigateTo(route, true);
    }

    // date range picker gets values from the date service

    DateTime MaxDate { get; set; } = DateTime.Now;


}
