@using Maxula_project.Services.UserService
@using Maxula_project.Services.EmailService
@inject IWebHostEnvironment WebhostEnvironment

@page "/register"
@inject IUserService _userService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject IEmailService _emailService
@inject IConsoleLoggerService Console

<PageTitle>Maxula - Register</PageTitle>

<section class="bg-gray-50 dark:bg-gray-900">
    <div class="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">

        <div class="w-full bg-white rounded-lg shadow dark:border mt-16 md:mt-32 xl:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
            <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
                <h1 class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                    Create an account
                </h1>
                <EditForm Model="@user" OnValidSubmit="HandleValidSubmit" class="space-y-4 md:space-y-6">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary /> *@

                    <div class="grid gap-1 grid-cols-1 md:grid-cols-2">
                        <!-- First name field -->
                        <div>
                            <label for="firstName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your first name</label>
                            <InputText id="firstName" @bind-Value="user.FirstName"
                                       class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 placeholder-gray-300 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                       placeholder="John" />
                            <ValidationMessage For="@(() => user.FirstName)" class="font-light text-red-500 dark:text-red-300" />
                        </div>

                        <!-- Last name field -->
                        <div>
                            <label for="lastName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your last name</label>
                            <InputText id="lastName" @bind-Value="user.LastName" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 placeholder-gray-300 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                       placeholder="Doe" />
                            <ValidationMessage For="@(() => user.LastName)" class="font-light text-red-500 dark:text-red-300" />
                        </div>
                    </div>

                    <!-- Email field -->
                    <div>
                        <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your email</label>
                        <InputText id="email" @bind-Value="user.Email" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 placeholder-gray-300 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                   placeholder="name@company.com" />
                        <ValidationMessage For="@(() => user.Email)" class="font-light text-red-500 dark:text-red-300" />
                    </div>

                    <!-- Password field -->
                    <div>
                        <label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
                        <div class="relative">
                            <InputText type="@passwordFieldType" id="password" @bind-Value="user.Password"
                                       placeholder="••••••••"
                                       class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 placeholder-gray-300 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                            <button type="button" class="absolute inset-y-0 right-0 pr-3 flex items-center" @onclick="TogglePasswordVisibility">
                                @if (passwordFieldType == "password")
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                                         class="w-4 h-4">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                                    </svg>

                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                                         class="w-4 h-4">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L9.88 9.88" />
                                    </svg>

                                }
                            </button>
                        </div>
                        <ValidationMessage For="@(() => user.Password)" class="font-light text-red-500 dark:text-red-300" />
                    </div>


                    <!-- Confirm Password field -->
                    <div>
                        <label for="confirm-password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Confirm password</label>
                        <InputText type="password" id="confirm-password" @bind-Value="user.ConfirmPassword"
                                   placeholder="••••••••"
                                   class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 placeholder-gray-300 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />

                        <ValidationMessage For="@(() => user.ConfirmPassword)" class="font-light text-red-500 dark:text-red-300" />
                    </div>

                    <!-- Terms and Conditions checkbox -->
                    <div class="flex items-start">
                        <div class="flex items-center h-5">
                            <InputCheckbox id="terms" @bind-Value="user.AcceptTerms"
                                           class="relative w-[3.25rem] h-7 p-px bg-gray-100 border-transparent text-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:ring-red-600 disabled:opacity-50 disabled:pointer-events-none checked:bg-none checked:text-primary-600 checked:border-primary-600 focus:checked:border-primary-600 dark:bg-gray-800 dark:border-gray-700 dark:checked:bg-primary-500 dark:checked:border-primary-500 dark:focus:ring-offset-gray-600 before:inline-block before:size-6 before:bg-white checked:before:bg-primary-200 before:translate-x-0 checked:before:translate-x-full before:rounded-full before:shadow before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-gray-400 dark:checked:before:bg-primary-200" />
                        </div>
                        <div class="ml-3 text-sm">
                            <label for="terms" class="font-light text-gray-500 dark:text-gray-300">I accept the <a href="#" class="font-medium text-primary-600 hover:underline dark:text-primary-500">Terms and Conditions</a></label>
                            <ValidationMessage For="@(() => user.AcceptTerms)" class="font-light text-red-500 dark:text-red-300" />
                        </div>
                    </div>

                    <!-- Submit button -->
                    <button type="submit"
                            class="grid place-items-center w-full text-white bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
                            disabled="@isLoading">

                        @if (isLoading)
                        {
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="white" stroke-width="4"></circle>
                                <path class="opacity-75" fill="white" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        }
                        else
                        {
                            <p>Create an account</p>
                        }
                    </button>
                    <p class="text-sm font-light text-gray-500 dark:text-gray-400">
                        Already have an account?
                        <a href="/login"
                           class="font-medium text-primary-600 hover:underline dark:text-primary-500">Login here</a>
                    </p>
                </EditForm>
            </div>
        </div>
    </div>
</section>

<AlertDialog Title="An error occured." IsVisible="@isErrorVisible">
    <p>An error has occured, please refresh the page and try again.</p>
</AlertDialog>

<AlertDialog Title="The email is already used." IsVisible="@isAlertVisible">
    <p>The provided emails is already used for an account, please use another email address or login in instead.</p>
</AlertDialog>

<SuccessDialog Title="Success, please confirm your email."
               BodyText="Please check your email for account confirmation link needed to login."
               IsVisible="@isSuccessVisible">
    <div class="mt-5 sm:mt-6">
        <button @onclick="navigateOnSuccess"
                type="button"
                class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-400 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:text-sm">
            Proceed
        </button>
    </div>
</SuccessDialog>

@code {

    // Modal code

    private bool isErrorVisible = false;

    private void OpenError()
    {
        isErrorVisible = true;
    }

    private bool isAlertVisible = false;

    private void OpenAlert()
    {
        isAlertVisible = true;
    }

    private bool isSuccessVisible = false;

    private void OpenSuccess()
    {
        isSuccessVisible = true;
    }

    // Custom console logger for client side

    public async Task LogAsync(object message)
    {
        await JS.InvokeVoidAsync("console.log", message);
    }


    // password visibility toggle
    string passwordFieldType = "password";

    void TogglePasswordVisibility()
    {
        passwordFieldType = passwordFieldType == "password" ? "text" : "password";
    }


    // Form validation and submit code

    private bool isLoading = false;

    private RegisterForm user = new();

    private async Task HandleValidSubmit()
    {
        @* isLoading = true;

        await Task.Delay(1000);

        var userFound = await _userService.GetUserByString(user.Email);

        if (userFound.Success)
        {
            OpenAlert();
            isLoading = false;
            return;
        }
        else
        {
            AddUserRequestDto newUser = new()
                {
                    Email = user.Email,
                    Password = user.Password,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                };

            var created = await _userService.AddUser(newUser);

            await Console.LogAsync(created);

            if (created.Success)
            {
                OpenSuccess();

                //Send mail to user's email for confirmation logic
                SendConfirmationMail(created.Data.Email, created.Data.VerificationToken);

                isLoading = false;
                return;
            }
            else
            {
                OpenError();
                isLoading = false;
                return;
            }

        } *@

    }

    private void navigateOnSuccess()
    {
        NavManager.NavigateTo("/login");
    }

    private void SendConfirmationMail(string email, string token)
    {
        string path = Path.Combine(WebhostEnvironment.WebRootPath, "MailPage/mail.html");
        string htmlBody = System.IO.File.ReadAllText(path);
        htmlBody = htmlBody.Replace("{token}", token);

        EmailModel mail = new()
            {
                To = email,
                Subject = "Maxula HR - Confirm account",
                Body = htmlBody
            };

        _emailService.SendEmail(mail);
    }
}
